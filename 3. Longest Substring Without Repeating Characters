3. Longest Substring Without Repeating Characters

Given a string s, find the length of the longest substringwithout repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

class Solution {
    public int lengthOfLongestSubstring(String s) { 
        if(s.length()<2){
            return s.length();
        }
        HashMap<Character, Integer> map = new HashMap<>();
        
        int max = 1;
        int prev = -1;
        for (int i = 0; i < s.length(); i++){
            char ch=s.charAt(i);
            if(map.containsKey(ch)){
                prev = Math.max(prev, map.get(ch));
            }
            map.put(ch,i);
            max=Math.max(max,i-prev);
        }
        return max;
    }
}
